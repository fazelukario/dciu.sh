# dciu.conf - Configuration for Docker Container Image Updater (dciu)
# Default Mode: autoupdate, monitor or none
MODE='monitor'

# Behavior for stopped containers: whether to update stopped containers or not
UPDATE_STOPPED='false'
# After updating stopped containers, whether to start them or not
START_STOPPED='false'

# Remove dangling images after updates
PRUNE_DANGLING='false'

# Update containers in docker compose stacks
UPDATE_COMPOSE='false'

# Labels for selecting containers
LABEL_MODE='dciu.mode'
# Labels to override stopped containers behavior
LABEL_UPDATE_STOPPED='dciu.update-stopped'
LABEL_START_STOPPED='dciu.start-stopped'
# Label to override dangling image prune behavior per container
LABEL_PRUNE_DANGLING='dciu.prune-dangling'
# Label to override update container in docker compose stacks behavior per container
LABEL_UPDATE_COMPOSE='dciu.update-compose'
# Label to tell dciu that container image in private repository
# NOTE: For images in Docker Hub's private repositories supported only those that use pure Manifest V2 format
# (e.g. "application/vnd.docker.distribution.manifest.v2+json")
# You can check if image supported by running the following command on the latest image and comparing the output:
# 1: docker inspect --format '{{index .RepoDigests 0}}' "$img" 2> /dev/null | awk -F'@' '{print $2}' | awk -F':' '{print $2}'
# 2: printf "%s" "$(docker manifest inspect "$img" 2> /dev/null)" | sha256sum | awk '{print substr($1, 1, 64)}'
# If the output of the commands is equal, then the image is supported by dciu
# ghcr.io private repositories are supported if you provide a GitHub token with read:packages scope
LABEL_PRIVATE_REPO='dciu.private-repo'

# Notify module name (script in notify/ directory)
NOTIFY_MODULE='discord,telegram'
# Notify events: comma- or space-separated list of events to notify on (e.g. 'update_available,updated', 'all' or 'none')
# Available events: update_available, updated, update_failed, update_skipped
# all: notify on all events
# none: do not notify on any event
NOTIFY_EVENT='update_available,updated,update_failed'

# Source of the notification (e.g. 'myserver', 'myserver.local', 'myserver.example.com')
#NOTIFY_SOURCE='myserver'

# GitHub token with read:packages scope for private repositories
#GITHUB_TOKEN='ghp_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX' # Update with actual token

# Optional registry authentication (uncomment if needed) [TODO: implement and test]
# REGISTRY_USER=''
# REGISTRY_PASSWORD=''

# Log file path
LOG_FILE="$SCRIPT_DIR/dciu.sh.log"

# Debug mode: if set to '1', dciu will run in debug mode
#DEBUG='0'

# NO_TIMESTAMP: if set to '1', dciu will not add timestamps to log messages
#NO_TIMESTAMP='0'

# Variables for notify modules must be exported to be available in the notify module scripts (e.g. prefixed with 'export')
#export DCIU_DISCORD_WEBHOOK_URL='https://discord.com/api/webhooks/some-numbers/some-letters' # Update with actual webhook URL
#export DCIU_DISCORD_AVATAR_URL='https://example.com/avatar.png'  # Update with actual avatar URL
#export DCIU_DISCORD_USERNAME='dciu.sh'

#export DCIU_TELEGRAM_BOT_APITOKEN='123456789:ABCxyz' # Update with actual bot token
#export DCIU_TELEGRAM_BOT_CHATID='123456789' # Update with actual chat ID
